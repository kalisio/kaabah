version: '3.5'

services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./configs/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - cadvisor
    ports:
      - 9090:9090
    networks:
      - platform-network
    deploy:
      replicas: 1
      placement:
        constraints: 
          - node.role == manager
      labels:
        - "traefik.backend=prometheus"
        - "traefik.enable=true"      
        - "traefik.docker.network=${PLATFORM}_network"
        - "traefik.port=9090"
        - "traefik.frontend.entryPoints=http,https"
        - "traefik.frontend.rule=Host:prometheus.${PLATFORM}.${DOMAIN}"
      restart_policy:
        condition: on-failure

  node-exporter:
    image: prom/node-exporter
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - 9100:9100
    networks:
      - platform-network
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  blackbox-exporter:
    image: prom/blackbox-exporter
    command: 
      - '--config.file=/config/blackbox.yml'
    volumes: 
      - ./configs/blackbox/:/config/
    networks:
      - platform-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  alertmanager:
    image: prom/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://alertmanager.${PLATFORM}.${DOMAIN}'
    volumes:
      - ./configs/alertmanager/:/etc/alertmanager/
    ports:
      - 9093:9093
    networks:
      - platform-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.backend=alertmanager"
        - "traefik.enable=true"      
        - "traefik.docker.network=${PLATFORM}_network"
        - "traefik.port=9093"
        - "traefik.frontend.entryPoints=http,https"
        - "traefik.frontend.rule=Host:alertmanager.${PLATFORM}.${DOMAIN}"
      restart_policy:
        condition: on-failure

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8081:8080
    networks:
      - platform-network
    deploy:
      mode: global
      labels:
        - "traefik.backend=cadvisor"
        - "traefik.enable=true"      
        - "traefik.docker.network=${PLATFORM}_network"
        - "traefik.port=8080"
        - "traefik.frontend.entryPoints=http,https"
        - "traefik.frontend.rule=Host:cadvisor.${PLATFORM}.${DOMAIN}"
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./configs/grafana/config.monitoring
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    networks:
      - platform-network
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.backend=grafana"
        - "traefik.enable=true"      
        - "traefik.docker.network=${PLATFORM}_network"
        - "traefik.port=3000"
        - "traefik.frontend.entryPoints=http,https"
        - "traefik.frontend.rule=Host:grafana.${PLATFORM}.${DOMAIN}"
      restart_policy:
        condition: on-failure

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  platform-network:
    external:
      name: ${PLATFORM}_network